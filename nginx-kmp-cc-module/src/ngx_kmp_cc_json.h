/* auto-generated by generate_json_header.py */

#ifndef ngx_copy_fix
#define ngx_copy_fix(dst, src)   ngx_copy(dst, (src), sizeof(src) - 1)
#endif

#ifndef ngx_copy_str
#define ngx_copy_str(dst, src)   ngx_copy(dst, (src).data, (src).len)
#endif

/* ngx_kmp_cc_service_publish_json writer */

static size_t
ngx_kmp_cc_service_publish_json_get_size(ngx_kmp_cc_service_t *obj)
{
    size_t  result;

    result =
        sizeof("{\"channel_id\":\"") - 1 +
            ngx_json_str_get_size(&obj->ctx->input.channel_id) +
        sizeof("\",\"track_id\":\"") - 1 +
            ngx_json_str_get_size(&obj->ctx->input.track_id) +
        sizeof("\",\"service_id\":\"") - 1 + ngx_json_str_get_size(&obj->id) +
        sizeof("\"}") - 1;

    return result;
}


static u_char *
ngx_kmp_cc_service_publish_json_write(u_char *p, ngx_kmp_cc_service_t *obj)
{
    p = ngx_copy_fix(p, "{\"channel_id\":\"");
    p = ngx_json_str_write(p, &obj->ctx->input.channel_id);
    p = ngx_copy_fix(p, "\",\"track_id\":\"");
    p = ngx_json_str_write(p, &obj->ctx->input.track_id);
    p = ngx_copy_fix(p, "\",\"service_id\":\"");
    p = ngx_json_str_write(p, &obj->id);
    p = ngx_copy_fix(p, "\"}");

    return p;
}


/* ngx_kmp_cc_service_json writer */

static size_t
ngx_kmp_cc_service_json_get_size(ngx_kmp_cc_service_t *obj)
{
    size_t  result;

    result =
        sizeof("{\"output\":") - 1 + ngx_kmp_out_track_json_get_size(obj->out)
            +
        sizeof(",\"received_bytes\":") - 1 + NGX_INT_T_LEN +
        sizeof("}") - 1;

    return result;
}


static u_char *
ngx_kmp_cc_service_json_write(u_char *p, ngx_kmp_cc_service_t *obj)
{
    p = ngx_copy_fix(p, "{\"output\":");
    p = ngx_kmp_out_track_json_write(p, obj->out);
    p = ngx_copy_fix(p, ",\"received_bytes\":");
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->received_bytes);
    *p++ = '}';

    return p;
}


/* ngx_kmp_cc_json writer */

size_t
ngx_kmp_cc_json_get_size(ngx_kmp_cc_ctx_t *obj)
{
    size_t                 result;
    ngx_queue_t           *q;
    ngx_kmp_cc_service_t  *cur;

    result =
        sizeof("{\"services\":{") - 1 +
        sizeof("},\"pending_packets\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"received_bytes\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"received_packets\":") - 1 + NGX_INT_T_LEN +
        sizeof("}") - 1;

    for (q = ngx_queue_head(&obj->services.queue);
        q != ngx_queue_sentinel(&obj->services.queue);
        q = ngx_queue_next(q))
    {
        cur = ngx_queue_data(q, ngx_kmp_cc_service_t, queue);
        result += cur->id.s.len + cur->id.escape;
        result += ngx_kmp_cc_service_json_get_size(cur) + sizeof(",\"\":") - 1;
    }

    return result;
}


u_char *
ngx_kmp_cc_json_write(u_char *p, ngx_kmp_cc_ctx_t *obj)
{
    ngx_queue_t           *q;
    ngx_kmp_cc_service_t  *cur;

    p = ngx_copy_fix(p, "{\"services\":{");

    for (q = ngx_queue_head(&obj->services.queue);
        q != ngx_queue_sentinel(&obj->services.queue);
        q = ngx_queue_next(q))
    {
        cur = ngx_queue_data(q, ngx_kmp_cc_service_t, queue);

        if (p[-1] != '{') {
            *p++ = ',';
        }

        *p++ = '"';
        p = ngx_json_str_write_escape(p, &cur->id.s, cur->id.escape);
        *p++ = '"';
        *p++ = ':';
        p = ngx_kmp_cc_service_json_write(p, cur);
    }

    p = ngx_copy_fix(p, "},\"pending_packets\":");
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->pending_packets);
    p = ngx_copy_fix(p, ",\"received_bytes\":");
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->received_bytes);
    p = ngx_copy_fix(p, ",\"received_packets\":");
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->received_packets);
    *p++ = '}';

    return p;
}
