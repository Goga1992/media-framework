/* auto-generated by generate_json_builder.py */

size_t
ngx_rtmp_kmp_api_video_codec_info_json_get_size(ngx_rtmp_codec_ctx_t *obj)
{
    size_t result =
        sizeof("{\"width\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"height\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"duration\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"frame_rate\":") - 1 + NGX_INT64_LEN + 3 +
        sizeof(",\"video_data_rate\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"video_codec_id\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"avc_profile\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"avc_compat\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"avc_level\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"avc_nal_bytes\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"avc_ref_frames\":") - 1 + NGX_INT_T_LEN +
        sizeof("}") - 1;

    return result;
}

u_char *
ngx_rtmp_kmp_api_video_codec_info_json_write(u_char *p, ngx_rtmp_codec_ctx_t
    *obj)
{
    p = ngx_copy(p, "{\"width\":", sizeof("{\"width\":") - 1);
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->width);
    p = ngx_copy(p, ",\"height\":", sizeof(",\"height\":") - 1);
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->height);
    p = ngx_copy(p, ",\"duration\":", sizeof(",\"duration\":") - 1);
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->duration);
    p = ngx_copy(p, ",\"frame_rate\":", sizeof(",\"frame_rate\":") - 1);
    p = ngx_sprintf(p, "%.2f", (double) obj->frame_rate);
    p = ngx_copy(p, ",\"video_data_rate\":", sizeof(",\"video_data_rate\":") -
        1);
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->video_data_rate);
    p = ngx_copy(p, ",\"video_codec_id\":", sizeof(",\"video_codec_id\":") -
        1);
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->video_codec_id);
    p = ngx_copy(p, ",\"avc_profile\":", sizeof(",\"avc_profile\":") - 1);
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->avc_profile);
    p = ngx_copy(p, ",\"avc_compat\":", sizeof(",\"avc_compat\":") - 1);
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->avc_compat);
    p = ngx_copy(p, ",\"avc_level\":", sizeof(",\"avc_level\":") - 1);
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->avc_level);
    p = ngx_copy(p, ",\"avc_nal_bytes\":", sizeof(",\"avc_nal_bytes\":") - 1);
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->avc_nal_bytes);
    p = ngx_copy(p, ",\"avc_ref_frames\":", sizeof(",\"avc_ref_frames\":") -
        1);
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->avc_ref_frames);
    *p++ = '}';

    return p;
}

size_t
ngx_rtmp_kmp_api_audio_codec_info_json_get_size(ngx_rtmp_codec_ctx_t *obj)
{
    size_t result =
        sizeof("{\"audio_data_rate\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"audio_codec_id\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"aac_profile\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"aac_chan_conf\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"aac_sbr\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"aac_ps\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"sample_rate\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"sample_size\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"audio_channels\":") - 1 + NGX_INT_T_LEN +
        sizeof("}") - 1;

    return result;
}

u_char *
ngx_rtmp_kmp_api_audio_codec_info_json_write(u_char *p, ngx_rtmp_codec_ctx_t
    *obj)
{
    p = ngx_copy(p, "{\"audio_data_rate\":", sizeof("{\"audio_data_rate\":") -
        1);
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->audio_data_rate);
    p = ngx_copy(p, ",\"audio_codec_id\":", sizeof(",\"audio_codec_id\":") -
        1);
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->audio_codec_id);
    p = ngx_copy(p, ",\"aac_profile\":", sizeof(",\"aac_profile\":") - 1);
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->aac_profile);
    p = ngx_copy(p, ",\"aac_chan_conf\":", sizeof(",\"aac_chan_conf\":") - 1);
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->aac_chan_conf);
    p = ngx_copy(p, ",\"aac_sbr\":", sizeof(",\"aac_sbr\":") - 1);
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->aac_sbr);
    p = ngx_copy(p, ",\"aac_ps\":", sizeof(",\"aac_ps\":") - 1);
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->aac_ps);
    p = ngx_copy(p, ",\"sample_rate\":", sizeof(",\"sample_rate\":") - 1);
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->sample_rate);
    p = ngx_copy(p, ",\"sample_size\":", sizeof(",\"sample_size\":") - 1);
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->sample_size);
    p = ngx_copy(p, ",\"audio_channels\":", sizeof(",\"audio_channels\":") -
        1);
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->audio_channels);
    *p++ = '}';

    return p;
}

static size_t
ngx_rtmp_kmp_track_video_json_get_size(ngx_rtmp_session_t *obj,
    ngx_rtmp_kmp_publish_t *pi, ngx_rtmp_codec_ctx_t *codec_ctx)
{
    size_t result =
        sizeof("\"input_type\":\"rtmp\",\"app\":\"") - 1 + obj->app.len +
            ngx_escape_json(NULL, obj->app.data, obj->app.len) +
        sizeof("\",\"flashver\":\"") - 1 + obj->flashver.len +
            ngx_escape_json(NULL, obj->flashver.data, obj->flashver.len) +
        sizeof("\",\"swf_url\":\"") - 1 + obj->swf_url.len +
            ngx_escape_json(NULL, obj->swf_url.data, obj->swf_url.len) +
        sizeof("\",\"tc_url\":\"") - 1 + obj->tc_url.len +
            ngx_escape_json(NULL, obj->tc_url.data, obj->tc_url.len) +
        sizeof("\",\"page_url\":\"") - 1 + obj->page_url.len +
            ngx_escape_json(NULL, obj->page_url.data, obj->page_url.len) +
        sizeof("\",\"addr\":\"") - 1 + obj->connection->addr_text.len +
            ngx_escape_json(NULL, obj->connection->addr_text.data,
            obj->connection->addr_text.len) +
        sizeof("\",\"connection\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"name\":\"") - 1 + pi->name.len + ngx_escape_json(NULL,
            pi->name.data, pi->name.len) +
        sizeof("\",\"type\":\"") - 1 + pi->type.len + ngx_escape_json(NULL,
            pi->type.data, pi->type.len) +
        sizeof("\",\"args\":\"") - 1 + pi->args.len + ngx_escape_json(NULL,
            pi->args.data, pi->args.len) +
        sizeof("\",\"media_type\":\"video\",\"codec_info\":") - 1 +
            ngx_rtmp_kmp_api_video_codec_info_json_get_size(codec_ctx);

    return result;
}

static u_char *
ngx_rtmp_kmp_track_video_json_write(u_char *p, ngx_rtmp_session_t *obj,
    ngx_rtmp_kmp_publish_t *pi, ngx_rtmp_codec_ctx_t *codec_ctx)
{
    p = ngx_copy(p, "\"input_type\":\"rtmp\",\"app\":\"",
        sizeof("\"input_type\":\"rtmp\",\"app\":\"") - 1);
    p = (u_char *) ngx_escape_json(p, obj->app.data, obj->app.len);
    p = ngx_copy(p, "\",\"flashver\":\"", sizeof("\",\"flashver\":\"") - 1);
    p = (u_char *) ngx_escape_json(p, obj->flashver.data, obj->flashver.len);
    p = ngx_copy(p, "\",\"swf_url\":\"", sizeof("\",\"swf_url\":\"") - 1);
    p = (u_char *) ngx_escape_json(p, obj->swf_url.data, obj->swf_url.len);
    p = ngx_copy(p, "\",\"tc_url\":\"", sizeof("\",\"tc_url\":\"") - 1);
    p = (u_char *) ngx_escape_json(p, obj->tc_url.data, obj->tc_url.len);
    p = ngx_copy(p, "\",\"page_url\":\"", sizeof("\",\"page_url\":\"") - 1);
    p = (u_char *) ngx_escape_json(p, obj->page_url.data, obj->page_url.len);
    p = ngx_copy(p, "\",\"addr\":\"", sizeof("\",\"addr\":\"") - 1);
    p = (u_char *) ngx_escape_json(p, obj->connection->addr_text.data,
        obj->connection->addr_text.len);
    p = ngx_copy(p, "\",\"connection\":", sizeof("\",\"connection\":") - 1);
    p = ngx_sprintf(p, "%uA", (ngx_atomic_uint_t) obj->connection->number);
    p = ngx_copy(p, ",\"name\":\"", sizeof(",\"name\":\"") - 1);
    p = (u_char *) ngx_escape_json(p, pi->name.data, pi->name.len);
    p = ngx_copy(p, "\",\"type\":\"", sizeof("\",\"type\":\"") - 1);
    p = (u_char *) ngx_escape_json(p, pi->type.data, pi->type.len);
    p = ngx_copy(p, "\",\"args\":\"", sizeof("\",\"args\":\"") - 1);
    p = (u_char *) ngx_escape_json(p, pi->args.data, pi->args.len);
    p = ngx_copy(p, "\",\"media_type\":\"video\",\"codec_info\":",
        sizeof("\",\"media_type\":\"video\",\"codec_info\":") - 1);
    p = ngx_rtmp_kmp_api_video_codec_info_json_write(p, codec_ctx);

    return p;
}

static size_t
ngx_rtmp_kmp_track_audio_json_get_size(ngx_rtmp_session_t *obj,
    ngx_rtmp_kmp_publish_t *pi, ngx_rtmp_codec_ctx_t *codec_ctx)
{
    size_t result =
        sizeof("\"input_type\":\"rtmp\",\"app\":\"") - 1 + obj->app.len +
            ngx_escape_json(NULL, obj->app.data, obj->app.len) +
        sizeof("\",\"flashver\":\"") - 1 + obj->flashver.len +
            ngx_escape_json(NULL, obj->flashver.data, obj->flashver.len) +
        sizeof("\",\"swf_url\":\"") - 1 + obj->swf_url.len +
            ngx_escape_json(NULL, obj->swf_url.data, obj->swf_url.len) +
        sizeof("\",\"tc_url\":\"") - 1 + obj->tc_url.len +
            ngx_escape_json(NULL, obj->tc_url.data, obj->tc_url.len) +
        sizeof("\",\"page_url\":\"") - 1 + obj->page_url.len +
            ngx_escape_json(NULL, obj->page_url.data, obj->page_url.len) +
        sizeof("\",\"addr\":\"") - 1 + obj->connection->addr_text.len +
            ngx_escape_json(NULL, obj->connection->addr_text.data,
            obj->connection->addr_text.len) +
        sizeof("\",\"connection\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"name\":\"") - 1 + pi->name.len + ngx_escape_json(NULL,
            pi->name.data, pi->name.len) +
        sizeof("\",\"type\":\"") - 1 + pi->type.len + ngx_escape_json(NULL,
            pi->type.data, pi->type.len) +
        sizeof("\",\"args\":\"") - 1 + pi->args.len + ngx_escape_json(NULL,
            pi->args.data, pi->args.len) +
        sizeof("\",\"media_type\":\"audio\",\"codec_info\":") - 1 +
            ngx_rtmp_kmp_api_audio_codec_info_json_get_size(codec_ctx);

    return result;
}

static u_char *
ngx_rtmp_kmp_track_audio_json_write(u_char *p, ngx_rtmp_session_t *obj,
    ngx_rtmp_kmp_publish_t *pi, ngx_rtmp_codec_ctx_t *codec_ctx)
{
    p = ngx_copy(p, "\"input_type\":\"rtmp\",\"app\":\"",
        sizeof("\"input_type\":\"rtmp\",\"app\":\"") - 1);
    p = (u_char *) ngx_escape_json(p, obj->app.data, obj->app.len);
    p = ngx_copy(p, "\",\"flashver\":\"", sizeof("\",\"flashver\":\"") - 1);
    p = (u_char *) ngx_escape_json(p, obj->flashver.data, obj->flashver.len);
    p = ngx_copy(p, "\",\"swf_url\":\"", sizeof("\",\"swf_url\":\"") - 1);
    p = (u_char *) ngx_escape_json(p, obj->swf_url.data, obj->swf_url.len);
    p = ngx_copy(p, "\",\"tc_url\":\"", sizeof("\",\"tc_url\":\"") - 1);
    p = (u_char *) ngx_escape_json(p, obj->tc_url.data, obj->tc_url.len);
    p = ngx_copy(p, "\",\"page_url\":\"", sizeof("\",\"page_url\":\"") - 1);
    p = (u_char *) ngx_escape_json(p, obj->page_url.data, obj->page_url.len);
    p = ngx_copy(p, "\",\"addr\":\"", sizeof("\",\"addr\":\"") - 1);
    p = (u_char *) ngx_escape_json(p, obj->connection->addr_text.data,
        obj->connection->addr_text.len);
    p = ngx_copy(p, "\",\"connection\":", sizeof("\",\"connection\":") - 1);
    p = ngx_sprintf(p, "%uA", (ngx_atomic_uint_t) obj->connection->number);
    p = ngx_copy(p, ",\"name\":\"", sizeof(",\"name\":\"") - 1);
    p = (u_char *) ngx_escape_json(p, pi->name.data, pi->name.len);
    p = ngx_copy(p, "\",\"type\":\"", sizeof("\",\"type\":\"") - 1);
    p = (u_char *) ngx_escape_json(p, pi->type.data, pi->type.len);
    p = ngx_copy(p, "\",\"args\":\"", sizeof("\",\"args\":\"") - 1);
    p = (u_char *) ngx_escape_json(p, pi->args.data, pi->args.len);
    p = ngx_copy(p, "\",\"media_type\":\"audio\",\"codec_info\":",
        sizeof("\",\"media_type\":\"audio\",\"codec_info\":") - 1);
    p = ngx_rtmp_kmp_api_audio_codec_info_json_write(p, codec_ctx);

    return p;
}
