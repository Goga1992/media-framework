/* auto-generated by generate_json_header.py */

#ifndef ngx_array_entries
#define ngx_array_entries(x)     (sizeof(x) / sizeof(x[0]))
#endif

#ifndef ngx_copy_fix
#define ngx_copy_fix(dst, src)   ngx_copy(dst, (src), sizeof(src) - 1)
#endif

#ifndef ngx_copy_str
#define ngx_copy_str(dst, src)   ngx_copy(dst, (src).data, (src).len)
#endif

/* ngx_kmp_out_upstream_json reader */

typedef struct {
    ngx_str_t   url;
    ngx_str_t   id;
    ngx_flag_t  auto_ack;
    ngx_str_t   connect_data;
} ngx_kmp_out_upstream_json_t;


static ngx_json_prop_t  ngx_kmp_out_upstream_json_url = {
    ngx_string("url"),
    116079ULL,
    NGX_JSON_STRING,
    ngx_json_set_str_slot,
    offsetof(ngx_kmp_out_upstream_json_t, url),
    NULL
};


static ngx_json_prop_t  ngx_kmp_out_upstream_json_id = {
    ngx_string("id"),
    3355ULL,
    NGX_JSON_STRING,
    ngx_json_set_str_slot,
    offsetof(ngx_kmp_out_upstream_json_t, id),
    NULL
};


static ngx_json_prop_t  ngx_kmp_out_upstream_json_auto_ack = {
    ngx_string("auto_ack"),
    2775987918329ULL,
    NGX_JSON_BOOL,
    ngx_json_set_flag_slot,
    offsetof(ngx_kmp_out_upstream_json_t, auto_ack),
    NULL
};


static ngx_json_prop_t  ngx_kmp_out_upstream_json_connect_data = {
    ngx_string("connect_data"),
    2609422999099421151ULL,
    NGX_JSON_STRING,
    ngx_json_set_str_slot,
    offsetof(ngx_kmp_out_upstream_json_t, connect_data),
    NULL
};


static ngx_json_prop_t  *ngx_kmp_out_upstream_json[] = {
    NULL,
    NULL,
    NULL,
    &ngx_kmp_out_upstream_json_connect_data,
    NULL,
    &ngx_kmp_out_upstream_json_auto_ack,
    &ngx_kmp_out_upstream_json_url,
    &ngx_kmp_out_upstream_json_id,
    NULL,
};


/* ngx_kmp_out_upstream_republish_json writer */

static size_t
ngx_kmp_out_upstream_republish_json_get_size(ngx_kmp_out_upstream_t *obj)
{
    size_t  result;

    result =
        sizeof("\"event_type\":\"republish\",\"id\":\"") - 1 + obj->id.len +
            ngx_escape_json(NULL, obj->id.data, obj->id.len) +
        sizeof("\",\"input_id\":\"") - 1 +
            ngx_json_str_get_size(&obj->track->input_id) +
        sizeof("\",\"channel_id\":\"") - 1 + obj->track->channel_id.len +
            ngx_escape_json(NULL, obj->track->channel_id.data,
            obj->track->channel_id.len) +
        sizeof("\",\"track_id\":\"") - 1 + obj->track->track_id.len +
            ngx_escape_json(NULL, obj->track->track_id.data,
            obj->track->track_id.len) +
        sizeof("\"") - 1;

    return result;
}


static u_char *
ngx_kmp_out_upstream_republish_json_write(u_char *p, ngx_kmp_out_upstream_t
    *obj)
{
    p = ngx_copy_fix(p, "\"event_type\":\"republish\",\"id\":\"");
    p = (u_char *) ngx_escape_json(p, obj->id.data, obj->id.len);
    p = ngx_copy_fix(p, "\",\"input_id\":\"");
    p = ngx_json_str_write(p, &obj->track->input_id);
    p = ngx_copy_fix(p, "\",\"channel_id\":\"");
    p = (u_char *) ngx_escape_json(p, obj->track->channel_id.data,
        obj->track->channel_id.len);
    p = ngx_copy_fix(p, "\",\"track_id\":\"");
    p = (u_char *) ngx_escape_json(p, obj->track->track_id.data,
        obj->track->track_id.len);
    *p++ = '\"';

    return p;
}


/* ngx_kmp_out_upstream_json writer */

size_t
ngx_kmp_out_upstream_json_get_size(ngx_kmp_out_upstream_t *obj)
{
    size_t  result;

    result =
        sizeof("{\"id\":\"") - 1 + obj->id.len + ngx_escape_json(NULL,
            obj->id.data, obj->id.len) +
        sizeof("\",\"remote_addr\":\"") - 1 + obj->remote_addr.len +
            ngx_escape_json(NULL, obj->remote_addr.data, obj->remote_addr.len)
            +
        sizeof("\",\"local_addr\":\"") - 1 + obj->local_addr.len +
            ngx_escape_json(NULL, obj->local_addr.data, obj->local_addr.len) +
        sizeof("\",\"connection\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"auto_ack\":") - 1 + sizeof("false") - 1 +
        sizeof(",\"sent_bytes\":") - 1 + NGX_OFF_T_LEN +
        sizeof(",\"position\":") - 1 + NGX_OFF_T_LEN +
        sizeof(",\"acked_frames\":") - 1 + NGX_INT64_LEN +
        sizeof(",\"acked_bytes\":") - 1 + NGX_OFF_T_LEN +
        sizeof(",\"auto_acked_frames\":") - 1 + NGX_INT_T_LEN +
        sizeof("}") - 1;

    return result;
}


u_char *
ngx_kmp_out_upstream_json_write(u_char *p, ngx_kmp_out_upstream_t *obj)
{
    p = ngx_copy_fix(p, "{\"id\":\"");
    p = (u_char *) ngx_escape_json(p, obj->id.data, obj->id.len);
    p = ngx_copy_fix(p, "\",\"remote_addr\":\"");
    p = (u_char *) ngx_escape_json(p, obj->remote_addr.data,
        obj->remote_addr.len);
    p = ngx_copy_fix(p, "\",\"local_addr\":\"");
    p = (u_char *) ngx_escape_json(p, obj->local_addr.data,
        obj->local_addr.len);
    p = ngx_copy_fix(p, "\",\"connection\":");
    p = ngx_sprintf(p, "%uA", (ngx_atomic_uint_t) obj->log.connection);
    p = ngx_copy_fix(p, ",\"auto_ack\":");
    if (obj->auto_ack) {
        p = ngx_copy_fix(p, "true");

    } else {
        p = ngx_copy_fix(p, "false");
    }

    p = ngx_copy_fix(p, ",\"sent_bytes\":");
    p = ngx_sprintf(p, "%O", (off_t) (obj->peer.connection ?
        obj->peer.connection->sent : 0));
    p = ngx_copy_fix(p, ",\"position\":");
    p = ngx_sprintf(p, "%O", (off_t) (obj->peer.connection ? obj->sent_base +
        obj->peer.connection->sent : 0));
    p = ngx_copy_fix(p, ",\"acked_frames\":");
    p = ngx_sprintf(p, "%uL", (uint64_t) obj->acked_frame_id -
        obj->track->connect.initial_frame_id);
    p = ngx_copy_fix(p, ",\"acked_bytes\":");
    p = ngx_sprintf(p, "%O", (off_t) obj->acked_bytes);
    p = ngx_copy_fix(p, ",\"auto_acked_frames\":");
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) obj->auto_acked_frames);
    *p++ = '}';

    return p;
}
