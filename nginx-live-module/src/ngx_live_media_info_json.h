/* auto-generated by generate_json_builder.py */

#ifndef ngx_copy_fix
#define ngx_copy_fix(dst, src)   ngx_copy(dst, (src), sizeof(src) - 1)
#endif


static size_t
ngx_live_media_info_json_video_get_size(media_info_t *obj)
{
    size_t  result =
        sizeof("{\"media_type\":\"video\",\"format\":\"") - 1 +
            sizeof(uint32_t) + ngx_escape_json(NULL, (u_char *) &obj->format,
            sizeof(uint32_t)) +
        sizeof("\",\"bitrate\":") - 1 + NGX_INT32_LEN +
        sizeof(",\"codec_id\":") - 1 + NGX_INT32_LEN +
        sizeof(",\"codec_name\":\"") - 1 + obj->codec_name.len +
            ngx_escape_json(NULL, obj->codec_name.data, obj->codec_name.len) +
        sizeof("\",\"extra_data\":\"") - 1 + obj->extra_data.len * 2 +
        sizeof("\",\"width\":") - 1 + NGX_INT32_LEN +
        sizeof(",\"height\":") - 1 + NGX_INT32_LEN +
        sizeof(",\"frame_rate\":") - 1 + NGX_INT64_LEN + 3 +
        sizeof("}") - 1;

    return result;
}

static u_char *
ngx_live_media_info_json_video_write(u_char *p, media_info_t *obj)
{
    p = ngx_copy_fix(p, "{\"media_type\":\"video\",\"format\":\"");
    p = (u_char *) ngx_escape_json(p, (u_char *) &obj->format,
        sizeof(uint32_t));
    p = ngx_copy_fix(p, "\",\"bitrate\":");
    p = ngx_sprintf(p, "%uD", (uint32_t) obj->bitrate);
    p = ngx_copy_fix(p, ",\"codec_id\":");
    p = ngx_sprintf(p, "%uD", (uint32_t) obj->codec_id);
    p = ngx_copy_fix(p, ",\"codec_name\":\"");
    p = (u_char *) ngx_escape_json(p, obj->codec_name.data,
        obj->codec_name.len);
    p = ngx_copy_fix(p, "\",\"extra_data\":\"");
    p = ngx_hex_dump(p, obj->extra_data.data, obj->extra_data.len);
    p = ngx_copy_fix(p, "\",\"width\":");
    p = ngx_sprintf(p, "%uD", (uint32_t) obj->u.video.width);
    p = ngx_copy_fix(p, ",\"height\":");
    p = ngx_sprintf(p, "%uD", (uint32_t) obj->u.video.height);
    p = ngx_copy_fix(p, ",\"frame_rate\":");
    p = ngx_sprintf(p, "%.2f", (double) obj->u.video.frame_rate_num /
        obj->u.video.frame_rate_denom);
    *p++ = '}';

    return p;
}

static size_t
ngx_live_media_info_json_audio_get_size(media_info_t *obj)
{
    size_t  result =
        sizeof("{\"media_type\":\"audio\",\"format\":\"") - 1 +
            sizeof(uint32_t) + ngx_escape_json(NULL, (u_char *) &obj->format,
            sizeof(uint32_t)) +
        sizeof("\",\"bitrate\":") - 1 + NGX_INT32_LEN +
        sizeof(",\"codec_id\":") - 1 + NGX_INT32_LEN +
        sizeof(",\"codec_name\":\"") - 1 + obj->codec_name.len +
            ngx_escape_json(NULL, obj->codec_name.data, obj->codec_name.len) +
        sizeof("\",\"extra_data\":\"") - 1 + obj->extra_data.len * 2 +
        sizeof("\",\"channels\":") - 1 + NGX_INT32_LEN +
        sizeof(",\"bits_per_sample\":") - 1 + NGX_INT32_LEN +
        sizeof(",\"sample_rate\":") - 1 + NGX_INT32_LEN +
        sizeof("}") - 1;

    return result;
}

static u_char *
ngx_live_media_info_json_audio_write(u_char *p, media_info_t *obj)
{
    p = ngx_copy_fix(p, "{\"media_type\":\"audio\",\"format\":\"");
    p = (u_char *) ngx_escape_json(p, (u_char *) &obj->format,
        sizeof(uint32_t));
    p = ngx_copy_fix(p, "\",\"bitrate\":");
    p = ngx_sprintf(p, "%uD", (uint32_t) obj->bitrate);
    p = ngx_copy_fix(p, ",\"codec_id\":");
    p = ngx_sprintf(p, "%uD", (uint32_t) obj->codec_id);
    p = ngx_copy_fix(p, ",\"codec_name\":\"");
    p = (u_char *) ngx_escape_json(p, obj->codec_name.data,
        obj->codec_name.len);
    p = ngx_copy_fix(p, "\",\"extra_data\":\"");
    p = ngx_hex_dump(p, obj->extra_data.data, obj->extra_data.len);
    p = ngx_copy_fix(p, "\",\"channels\":");
    p = ngx_sprintf(p, "%uD", (uint32_t) obj->u.audio.channels);
    p = ngx_copy_fix(p, ",\"bits_per_sample\":");
    p = ngx_sprintf(p, "%uD", (uint32_t) obj->u.audio.bits_per_sample);
    p = ngx_copy_fix(p, ",\"sample_rate\":");
    p = ngx_sprintf(p, "%uD", (uint32_t) obj->u.audio.sample_rate);
    *p++ = '}';

    return p;
}
