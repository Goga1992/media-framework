#
#  procedure for replaying a live stream:
#  1. copy the persist files from s3 to /tmp/store/channel/{channel_id}
#     make sure to update the permissions of the files to make them readable by nginx (e.g. chown -R nobody:nogroup)
#  2. pull the segment creation times to /tmp/{channel_id}-segments.log -
#     s3grep -h -v --include 'packager*' {entry_id} {path_to_logs} | grep -a 'ngx_live_segmenter_create_segments: pts:' | jq -r .log | grep . > /tmp/{channel_id}-segments.log
#  3. start nginx with this conf -
#     /usr/local/nginx/sbin/nginx -c /path/to/replay.conf
#  4. load the channel -
#     curl -HContent-Type:application/json -d '{"id":"{channel_id}","preset":"main"}' localhost:8001/control/channels/
#  5. play the stream -
#     http://localhost:8001/pckg/{channel_id}/tl/{recording_timeline_id}/time/{time_of_incident}/master.m3u8
#

worker_rlimit_core  500M;
working_directory   /tmp/;

worker_processes  1;
debug_points stop;

error_log  /var/log/nginx/error.log debug;

events {
    worker_connections  1024;
}

live {

    store_s3_block local_bucket {
        url http://127.0.0.1:8001;
        access_key AKIAIOSFODNN7EXAMPLE;
        secret_key wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY;
        service s3;
        region us-east-1;
    }

    persist_media_path /store/channel/$channel_id/bucket/$persist_bucket_id;
    persist_setup_path /store/channel/$channel_id/setup;
    persist_index_path /store/channel/$channel_id/index;
    persist_delta_path /store/channel/$channel_id/delta;
    persist_filler_path /store/channel/$channel_id/filler;
    persist_write off;

    preset main {
        store_s3 local_bucket;
    }
}

http {

    lua_package_path "/usr/local/src/lua-resty-core/lib/?.lua;/usr/local/src/lua-resty-lrucache/lib/?.lua;/opt/kaltura/live/nginx-live-module/test/?.lua;;";

    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent" '
                    '$live_ksmp_err_code "$live_ksmp_err_msg" '
                    '"$live_ksmp_source" $pckg_err_code "$pckg_err_msg" '
                    '$pckg_upstream_status';

    server {

        listen       8001;
        server_name  localhost;

        access_log  /var/log/nginx/access.log main;

        # s3 stub

        location /store/ {
            allow 127.0.0.1/32;
            deny all;

            root /tmp/;
            dav_methods PUT;
            create_full_put_path on;
            client_max_body_size 100m;
        }

        # live

        location /control/ {
            allow 127.0.0.1/32;
            deny all;

            live_api write=on upsert=on;
        }

        location /ksmp/ {
            live_ksmp;
        }

        # pckg redirect

        location ~ /pckg/(?P<channel_id>[^/]+)/tl/(?P<timeline_id>[^/]+)/time/(?P<time>[^/]+) {
            content_by_lua_block {
                local m = require('replay')
                local channel_id = ngx.var.channel_id
                local file = '/tmp/' .. channel_id .. '-segments.log'
                local req_time = ngx.var.time
                local start = m.get_start_time(file, req_time)
                local uri = ngx.var.uri
                local new_uri = uri:gsub('/time/' .. req_time, '/st/' .. start)
                return ngx.redirect(new_uri)
            }
        }

        # pckg

        add_header Access-Control-Allow-Headers 'Origin,Range,Accept-Encoding,Referer,Cache-Control';
        add_header Access-Control-Expose-Headers 'Server,Content-Length,Content-Range,Date';
        add_header Access-Control-Allow-Methods 'GET,HEAD,OPTIONS';
        add_header Access-Control-Allow-Origin '*';

        pckg_uri /ksmp_proxy/;
        pckg_channel_id $channel_id;
        pckg_timeline_id $timeline_id;
        pckg_segment_metadata '{"timestamp":$pckg_segment_dts,"sequenceId":"$pckg_variant_ids"}';

        location ~ /pckg/(?P<channel_id>[^/]+)/tl/(?P<timeline_id>[^/]+)/st/(?P<start_time>[^/]+) {
            set_by_lua_block $max_segment_index {
                local m = require('replay')
                local channel_id = ngx.var.channel_id
                local file = '/tmp/' .. channel_id .. '-segments.log'
                local start = ngx.var.start_time
                return m.get_segment(file, start)
            }

            pckg;
            pckg_max_segment_index $max_segment_index;
        }

        location /ksmp_proxy/ {
            internal;
            proxy_pass http://127.0.0.1:8001/ksmp/;
            subrequest_output_buffer_size 20m;
        }
    }
}
