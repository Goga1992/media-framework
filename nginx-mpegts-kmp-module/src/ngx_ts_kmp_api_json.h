/* auto-generated by generate_json_header.py */

#ifndef ngx_copy_fix
#define ngx_copy_fix(dst, src)   ngx_copy(dst, (src), sizeof(src) - 1)
#endif

#ifndef ngx_copy_str
#define ngx_copy_str(dst, src)   ngx_copy(dst, (src).data, (src).len)
#endif

/* ngx_ts_kmp_api_track_json writer */

static size_t
ngx_ts_kmp_api_track_json_get_size(ngx_ts_kmp_track_t *obj)
{
    size_t  result;

    result =
        ngx_kmp_out_track_json_get_size(obj->track);

    return result;
}


static u_char *
ngx_ts_kmp_api_track_json_write(u_char *p, ngx_ts_kmp_track_t *obj)
{
    p = ngx_kmp_out_track_json_write(p, obj->track);

    return p;
}


/* ngx_ts_kmp_api_session_json writer */

static size_t
ngx_ts_kmp_api_session_json_get_size(ngx_ts_kmp_ctx_t *obj)
{
    size_t               result;
    ngx_queue_t         *q;
    ngx_ts_kmp_track_t  *cur;

    result =
        sizeof("{\"remote_addr\":\"") - 1 +
            ngx_json_str_get_size(&obj->remote_addr) +
        sizeof("\",\"connection\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"uptime\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"stream_id\":\"") - 1 + ngx_json_str_get_size(&obj->header) +
        sizeof("\",\"tracks\":[") - 1 +
        sizeof("]}") - 1;

    for (q = ngx_queue_head(&obj->tracks);
        q != ngx_queue_sentinel(&obj->tracks);
        q = ngx_queue_next(q))
    {
        cur = ngx_queue_data(q, ngx_ts_kmp_track_t, queue);
        result += ngx_ts_kmp_api_track_json_get_size(cur) + sizeof(",") - 1;
    }

    return result;
}


static u_char *
ngx_ts_kmp_api_session_json_write(u_char *p, ngx_ts_kmp_ctx_t *obj)
{
    ngx_queue_t         *q;
    ngx_ts_kmp_track_t  *cur;

    p = ngx_copy_fix(p, "{\"remote_addr\":\"");
    p = ngx_json_str_write(p, &obj->remote_addr);
    p = ngx_copy_fix(p, "\",\"connection\":");
    p = ngx_sprintf(p, "%uA", (ngx_atomic_uint_t) obj->connection->number);
    p = ngx_copy_fix(p, ",\"uptime\":");
    p = ngx_sprintf(p, "%i", (ngx_int_t) (ngx_current_msec - obj->start_msec)
        / 1000);
    p = ngx_copy_fix(p, ",\"stream_id\":\"");
    p = ngx_json_str_write(p, &obj->header);
    p = ngx_copy_fix(p, "\",\"tracks\":[");

    for (q = ngx_queue_head(&obj->tracks);
        q != ngx_queue_sentinel(&obj->tracks);
        q = ngx_queue_next(q))
    {
        cur = ngx_queue_data(q, ngx_ts_kmp_track_t, queue);

        if (p[-1] != '[') {
            *p++ = ',';
        }

        p = ngx_ts_kmp_api_track_json_write(p, cur);
    }

    p = ngx_copy_fix(p, "]}");

    return p;
}


/* ngx_ts_kmp_api_server_json writer */

static size_t
ngx_ts_kmp_api_server_json_get_size(ngx_stream_core_srv_conf_t *obj)
{
    size_t              result;
    ngx_queue_t        *q;
    ngx_ts_kmp_ctx_t   *cur;
    ngx_ts_kmp_conf_t  *tscf;

    tscf = ngx_stream_ts_get_ts_kmp_conf(obj->ctx);
    result =
        sizeof("{\"sessions\":[") - 1 +
        sizeof("]}") - 1;

    for (q = ngx_queue_head(&tscf->sessions);
        q != ngx_queue_sentinel(&tscf->sessions);
        q = ngx_queue_next(q))
    {
        cur = ngx_queue_data(q, ngx_ts_kmp_ctx_t, queue);
        result += ngx_ts_kmp_api_session_json_get_size(cur) + sizeof(",") - 1;
    }

    return result;
}


static u_char *
ngx_ts_kmp_api_server_json_write(u_char *p, ngx_stream_core_srv_conf_t *obj)
{
    ngx_queue_t        *q;
    ngx_ts_kmp_ctx_t   *cur;
    ngx_ts_kmp_conf_t  *tscf;

    tscf = ngx_stream_ts_get_ts_kmp_conf(obj->ctx);
    p = ngx_copy_fix(p, "{\"sessions\":[");

    for (q = ngx_queue_head(&tscf->sessions);
        q != ngx_queue_sentinel(&tscf->sessions);
        q = ngx_queue_next(q))
    {
        cur = ngx_queue_data(q, ngx_ts_kmp_ctx_t, queue);

        if (p[-1] != '[') {
            *p++ = ',';
        }

        p = ngx_ts_kmp_api_session_json_write(p, cur);
    }

    p = ngx_copy_fix(p, "]}");

    return p;
}


/* ngx_ts_kmp_api_stream_json writer */

static size_t
ngx_ts_kmp_api_stream_json_get_size(ngx_stream_core_main_conf_t *obj)
{
    size_t                       result;
    ngx_uint_t                   n;
    ngx_stream_core_srv_conf_t  *cur;

    result =
        sizeof("\"servers\":[") - 1 +
        sizeof("]") - 1;

    for (n = 0; n < obj->servers.nelts; n++) {
        cur = ((ngx_stream_core_srv_conf_t **) obj->servers.elts)[n];

        result += ngx_ts_kmp_api_server_json_get_size(cur) + sizeof(",") - 1;
    }

    return result;
}


static u_char *
ngx_ts_kmp_api_stream_json_write(u_char *p, ngx_stream_core_main_conf_t *obj)
{
    ngx_uint_t                   n;
    ngx_stream_core_srv_conf_t  *cur;

    p = ngx_copy_fix(p, "\"servers\":[");

    for (n = 0; n < obj->servers.nelts; n++) {
        cur = ((ngx_stream_core_srv_conf_t **) obj->servers.elts)[n];

        if (p[-1] != '[') {
            *p++ = ',';
        }

        p = ngx_ts_kmp_api_server_json_write(p, cur);
    }

    *p++ = ']';

    return p;
}


/* ngx_ts_kmp_api_json writer */

static size_t
ngx_ts_kmp_api_json_get_size(void *obj)
{
    size_t  result;

    result =
        sizeof("{\"version\":\"") - 1 +
            ngx_json_str_get_size(&ngx_ts_kmp_version) +
        sizeof("\",\"nginx_version\":\"") - 1 +
            ngx_json_str_get_size(&ngx_ts_kmp_nginx_version) +
        sizeof("\",\"compiler\":\"") - 1 +
            ngx_json_str_get_size(&ngx_ts_kmp_compiler) +
        sizeof("\",\"built\":\"") - 1 +
            ngx_json_str_get_size(&ngx_ts_kmp_built) +
        sizeof("\",\"pid\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"uptime\":") - 1 + NGX_INT_T_LEN +
        sizeof(",\"stream\":{") - 1 + ngx_ts_kmp_api_stream_json_get_size(obj)
            +
        sizeof("}}") - 1;

    return result;
}


static u_char *
ngx_ts_kmp_api_json_write(u_char *p, void *obj)
{
    p = ngx_copy_fix(p, "{\"version\":\"");
    p = ngx_json_str_write(p, &ngx_ts_kmp_version);
    p = ngx_copy_fix(p, "\",\"nginx_version\":\"");
    p = ngx_json_str_write(p, &ngx_ts_kmp_nginx_version);
    p = ngx_copy_fix(p, "\",\"compiler\":\"");
    p = ngx_json_str_write(p, &ngx_ts_kmp_compiler);
    p = ngx_copy_fix(p, "\",\"built\":\"");
    p = ngx_json_str_write(p, &ngx_ts_kmp_built);
    p = ngx_copy_fix(p, "\",\"pid\":");
    p = ngx_sprintf(p, "%ui", (ngx_uint_t) ngx_getpid());
    p = ngx_copy_fix(p, ",\"uptime\":");
    p = ngx_sprintf(p, "%i", (ngx_int_t) (ngx_cached_time->sec -
        ngx_ts_kmp_start_time));
    p = ngx_copy_fix(p, ",\"stream\":{");
    p = ngx_ts_kmp_api_stream_json_write(p, obj);
    p = ngx_copy_fix(p, "}}");

    return p;
}
