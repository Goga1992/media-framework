import sys
import os

if len(sys.argv) < 3:
    print 'Usage:\n\t%s <routes definition file> <base name>' % os.path.basename(__file__)
    sys.exit(1)

INPUT_FILE = sys.argv[1]
BASE_NAME = sys.argv[2]

METHODS = ['GET', 'POST', 'PUT']

HEADER_MACRO = '_%s_ROUTES_H_INCLUDED_' % BASE_NAME.upper()
BASE_VAR_NAME = '%s_route' % BASE_NAME
CHILD_TYPE_NAME = '%s_route_child_t' % BASE_NAME
CHILD_STRUCT_NAME = '%s_route_child_s' % BASE_NAME
NODE_TYPE_NAME = '%s_route_node_t' % BASE_NAME
HANDLER_TYPE_NAME = '%s_route_handler_pt' % BASE_NAME
DATA_HANDLER_TYPE_NAME = '%s_route_data_handler_pt' % BASE_NAME

def parseInputFile(inputFile):
    root = { 'children': {}, 'handlers': {}}
    for curLine in file(inputFile):
        curLine = curLine.strip()
        if len(curLine) == 0:
            continue
        method, path = curLine.split()
        if not method in METHODS:
            print 'Unsupported method %s' % method
            sys.exit(1)
        splittedPath = filter(len, path.lstrip('/').split('/'))

        cur = root
        for name in splittedPath:
            cur['children'].setdefault(name, { 'children': {}, 'handlers': {}})
            cur = cur['children'][name]

        handlerName = BASE_NAME
        if len(splittedPath) > 0:
            if splittedPath[-1] != '%':
                handlerName += '_%s' % splittedPath[-1]
            else:
                handlerName += '_%s' % splittedPath[-2][:-1]
        handlerName += '_%s' % method.lower()
        cur['handlers'][method] = handlerName
    return root

def outputHeader():
    print '// auto-generated by %s\n' % os.path.basename(__file__)
    print '''#ifndef %s
#define %s
''' % (HEADER_MACRO, HEADER_MACRO)

    """print 'enum {'
    for method in METHODS:
        print '\tROUTE_METHOD_%s,' % method
    print '\n\tROUTE_METHOD_COUNT\n};\n'

    print 'static ngx_uint_t route_methods[] = {'
    for method in METHODS:
        print '\tNGX_HTTP_%s,' % method
    print '\n\tNGX_HTTP_UNKNOWN\n};\n'"""

    print '''typedef struct %s %s;
''' % (CHILD_STRUCT_NAME,CHILD_TYPE_NAME)

    print '''typedef struct {
    %s *children;''' % CHILD_TYPE_NAME
    for method in METHODS:
        if method in ['PUT', 'POST']:
            handlerTypeName = DATA_HANDLER_TYPE_NAME
        else:
            handlerTypeName = HANDLER_TYPE_NAME

        print '\t%s %s;' % (handlerTypeName, method.lower())
    print '} %s;\n' % NODE_TYPE_NAME

    print '''struct %s {
    ngx_str_t name;
    %s *node;
};
''' % (CHILD_STRUCT_NAME, NODE_TYPE_NAME)

def outputNode(node, base):
    children = node['children']
    if len(children) > 0:
        childSpecs = ''
        for name, child in children.items():
            if name == '%':
                childBase = base + '_param'
            else:
                childBase = base + '_' + name
            outputNode(child, childBase)
            childSpecs += '\t{ ngx_string("%s"), &%s },\n' % (name, childBase)
        childSpecs += '\t{ ngx_null_string, NULL },\n'
        childrenParam = '%s_children' % base
        print 'static %s %s[] = {\n%s};\n' % (CHILD_TYPE_NAME, childrenParam, childSpecs)
        childrenParam = '%s' % childrenParam
    else:
        childrenParam = 'NULL'

    handlers = node['handlers']
    handlersArr = ''
    for method in METHODS:
        if handlers.has_key(method):
            handlerName = '&%s' % handlers[method]
        else:
            handlerName = 'NULL'

        handlersArr += '\t%s,\n' % handlerName
    print 'static %s %s = {\n\t%s,\n%s};\n' % (NODE_TYPE_NAME, base, childrenParam, handlersArr)

def outputFooter():
    print '#endif /* %s */' % HEADER_MACRO

root = parseInputFile(INPUT_FILE)
outputHeader()
outputNode(root, BASE_VAR_NAME)
outputFooter()
